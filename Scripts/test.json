{
  "sourceid": "3",
  "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).",
  "method": "GET",
  "evidence": "",
  "pluginId": "10016",
  "cweid": "933",
  "confidence": "Medium",
  "wascid": "14",
  "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server",
  "messageId": "1",
  "url": "http://192.168.2.131/dvwa/",
  "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/",
  "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.",
  "alert": "Web Browser XSS Protection Not Enabled",
  "param": "X-XSS-Protection",
  "attack": "",
  "name": "Web Browser XSS Protection Not Enabled",
  "risk": "Low",
  "id": "0"
},
{
  "sourceid": "3",
  "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.",
  "method": "GET",
  "evidence": "",
  "pluginId": "10021",
  "cweid": "16",
  "confidence": "Medium",
  "wascid": "15",
  "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
  "messageId": "1",
  "url": "http://192.168.2.131/dvwa/",
  "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers",
  "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
  "alert": "X-Content-Type-Options Header Missing",
  "param": "X-Content-Type-Options",
  "attack": "",
  "name": "X-Content-Type-Options Header Missing",
  "risk": "Low",
  "id": "1"
},
{
  "sourceid": "3",
  "other": "",
  "method": "GET",
  "evidence": "",
  "pluginId": "10020",
  "cweid": "16",
  "confidence": "Medium",
  "wascid": "15",
  "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.",
  "messageId": "1",
  "url": "http://192.168.2.131/dvwa/",
  "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx",
  "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).",
  "alert": "X-Frame-Options Header Not Set",
  "param": "X-Frame-Options",
  "attack": "",
  "name": "X-Frame-Options Header Not Set",
  "risk": "Medium",
  "id": "2"
},
{
  "sourceid": "3",
  "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).",
  "method": "GET",
  "evidence": "",
  "pluginId": "10016",
  "cweid": "933",
  "confidence": "Medium",
  "wascid": "14",
  "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server",
  "messageId": "6",
  "url": "http://192.168.2.131/dvwa/login.php",
  "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/",
  "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.",
  "alert": "Web Browser XSS Protection Not Enabled",
  "param": "X-XSS-Protection",
  "attack": "",
  "name": "Web Browser XSS Protection Not Enabled",
  "risk": "Low",
  "id": "6"
},
{
  "sourceid": "3",
  "other": "",
  "method": "GET",
  "evidence": "<input type = \"password\" class = \"form-control\"\r\n               name = \"password\" placeholder = \"password = hiddenpage\" >",
  "pluginId": "10012",
  "cweid": "525",
  "confidence": "Medium",
  "wascid": "15",
  "description": "The AUTOCOMPLETE attribute is not disabled on an HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.",
  "messageId": "6",
  "url": "http://192.168.2.131/dvwa/login.php",
  "reference": "http://www.w3schools.com/tags/att_input_autocomplete.asp\nhttps://msdn.microsoft.com/en-us/library/ms533486%28v=vs.85%29.aspx",
  "solution": "Turn off the AUTOCOMPLETE attribute in forms or individual input elements containing password inputs by using AUTOCOMPLETE='OFF'.",
  "alert": "Password Autocomplete in Browser",
  "param": "password",
  "attack": "",
  "name": "Password Autocomplete in Browser",
  "risk": "Low",
  "id": "7"
},
{
  "sourceid": "3",
  "other": "The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: \nX-XSS-Protection: 1; mode=block\nX-XSS-Protection: 1; report=http://www.example.com/xss\nThe following values would disable it:\nX-XSS-Protection: 0\nThe X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).\nNote that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).",
  "method": "POST",
  "evidence": "",
  "pluginId": "10016",
  "cweid": "933",
  "confidence": "Medium",
  "wascid": "14",
  "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server",
  "messageId": "9",
  "url": "http://192.168.2.131/dvwa/hiddenpage.php",
  "reference": "https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\nhttps://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/",
  "solution": "Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.",
  "alert": "Web Browser XSS Protection Not Enabled",
  "param": "X-XSS-Protection",
  "attack": "",
  "name": "Web Browser XSS Protection Not Enabled",
  "risk": "Low",
  "id": "8"
},
{
  "sourceid": "3",
  "other": "This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scanner will not alert on client or server error responses.",
  "method": "POST",
  "evidence": "",
  "pluginId": "10021",
  "cweid": "16",
  "confidence": "Medium",
  "wascid": "15",
  "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
  "messageId": "9",
  "url": "http://192.168.2.131/dvwa/hiddenpage.php",
  "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://www.owasp.org/index.php/List_of_useful_HTTP_headers",
  "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
  "alert": "X-Content-Type-Options Header Missing",
  "param": "X-Content-Type-Options",
  "attack": "",
  "name": "X-Content-Type-Options Header Missing",
  "risk": "Low",
  "id": "9"
},
{
  "sourceid": "3",
  "other": "",
  "method": "POST",
  "evidence": "",
  "pluginId": "10020",
  "cweid": "16",
  "confidence": "Medium",
  "wascid": "15",
  "description": "X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.",
  "messageId": "9",
  "url": "http://192.168.2.131/dvwa/hiddenpage.php",
  "reference": "http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx",
  "solution": "Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).",
  "alert": "X-Frame-Options Header Not Set",
  "param": "X-Frame-Options",
  "attack": "",
  "name": "X-Frame-Options Header Not Set",
  "risk": "Medium",
  "id": "10"
},
{
  "sourceid": "1",
  "other": "",
  "method": "POST",
  "evidence": "root:x:0:0",
  "pluginId": "90020",
  "cweid": "78",
  "confidence": "Medium",
  "wascid": "31",
  "description": "Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.",
  "messageId": "492",
  "url": "http://192.168.2.131/dvwa/hiddenpage.php",
  "reference": "http://cwe.mitre.org/data/definitions/78.html\nhttps://www.owasp.org/index.php/Command_Injection",
  "solution": "If at all possible, use library calls rather than external processes to recreate the desired functionality.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n\nFor any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the command locally in the session's state instead of sending it out to the client in a hidden form field.\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nFor example, consider using the ESAPI Encoding control or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.\n\nIf you need to use dynamically-generated query strings or commands in spite of the risk, properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection.\n\nIf the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nSome languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nWhen constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.\n\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \">\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.\n\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
  "alert": "Remote OS Command Injection",
  "param": "mesje",
  "attack": "ZAP&cat /etc/passwd&",
  "name": "Remote OS Command Injection",
  "risk": "High",
  "id": "14"
}